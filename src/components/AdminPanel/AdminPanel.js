import React, { useState, useEffect } from 'react';
import './AdminPanel.css';
import ProductForm from './ProductForm';
import ProductList from './ProductList';
import Dashboard from './Dashboard';
import AuthWrapper from './AuthWrapper';
import AdminDebugTest from '../../debug/AdminDebugTest';
import ApiTester from '../../debug/ApiTester';

const AdminPanel = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState(null);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [editingProduct, setEditingProduct] = useState(null);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const token = localStorage.getItem('adminToken');
    const userData = localStorage.getItem('adminUser');
    
    if (token && userData) {
      try {
        const parsedUser = JSON.parse(userData);
        if (parsedUser.role === 'admin') {
          setUser(parsedUser);
          setIsAuthenticated(true);
          loadProducts();
        } else {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
          localStorage.removeItem('adminToken');
          localStorage.removeItem('adminUser');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        localStorage.removeItem('adminToken');
        localStorage.removeItem('adminUser');
      }
    }
  }, []);

  const loadProducts = async () => {
    try {
      setLoading(true);
      const response = await fetch('http://localhost:5000/api/products');
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('Loaded products:', data); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
      
      // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º products
      setProducts(data.products || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
      setProducts([]);
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleLogin = (userData, token) => {
    console.log('Login data:', userData); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    
    if (userData.role !== 'admin') {
      alert('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      return;
    }
    
    setUser(userData);
    setIsAuthenticated(true);
    localStorage.setItem('adminToken', token);
    localStorage.setItem('adminUser', JSON.stringify(userData));
    loadProducts();
  };

  const handleLogout = () => {
    setUser(null);
    setIsAuthenticated(false);
    localStorage.removeItem('adminToken');
    localStorage.removeItem('adminUser');
    setActiveTab('dashboard');
  };

  const handleProductSave = async (productData) => {
    try {
      setLoading(true);
      const token = localStorage.getItem('adminToken');
      
      if (!token) {
        alert('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        return;
      }

      console.log('Saving product:', productData); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
      
      const formData = new FormData();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è –∫—Ä–æ–º–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      Object.keys(productData).forEach(key => {
        if (key === 'sizes') {
          formData.append(key, JSON.stringify(productData[key]));
        } else if (key === 'tags') {
          formData.append(key, JSON.stringify(productData[key] || []));
        } else if (key === 'images' && Array.isArray(productData[key])) {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
          productData[key].forEach((file) => {
            if (file instanceof File) {
              formData.append('images', file);
            }
          });
        } else if (key !== 'images') {
          formData.append(key, productData[key]);
        }
      });

      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ FormData –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('FormData contents:');
      for (let pair of formData.entries()) {
        console.log(pair[0] + ': ' + pair[1]);
      }

      const url = editingProduct 
        ? `http://localhost:5000/api/products/${editingProduct._id}`
        : 'http://localhost:5000/api/products';
      
      const method = editingProduct ? 'PUT' : 'POST';

      console.log(`Making ${method} request to:`, url); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

      const response = await fetch(url, {
        method,
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: formData
      });

      console.log('Response status:', response.status); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

      if (response.ok) {
        const result = await response.json();
        console.log('Product saved successfully:', result);
        
        await loadProducts(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        setEditingProduct(null);
        setActiveTab('products');
        alert(editingProduct ? '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!' : '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
      } else {
        const errorData = await response.json();
        console.error('Server error:', errorData);
        alert('–û—à–∏–±–∫–∞: ' + (errorData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'));
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleProductEdit = (product) => {
    console.log('Editing product:', product); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    setEditingProduct(product);
    setActiveTab('add-product');
  };

  const handleProductDelete = async (productId) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) {
      return;
    }

    try {
      setLoading(true);
      const token = localStorage.getItem('adminToken');
      
      if (!token) {
        alert('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        return;
      }

      console.log('Deleting product ID:', productId); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

      const response = await fetch(`http://localhost:5000/api/products/${productId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('Delete response status:', response.status); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

      if (response.ok) {
        const result = await response.json();
        console.log('Product deleted successfully:', result);
        
        await loadProducts(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        alert('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
      } else {
        const errorData = await response.json();
        console.error('Delete error:', errorData);
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + (errorData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'));
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
      alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
  const checkServerConnection = async () => {
    try {
      const response = await fetch('http://localhost:5000/api/products');
      if (response.ok) {
        console.log('Server connection OK');
        return true;
      } else {
        console.error('Server responded with error:', response.status);
        return false;
      }
    } catch (error) {
      console.error('Server connection failed:', error);
      return false;
    }
  };

  if (!isAuthenticated) {
    return <AuthWrapper onLogin={handleLogin} />;
  }

  return (
    <div className="admin-panel">
      <div className="admin-header">
        <h1>–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ VINESENT</h1>
        <div className="admin-user-info">
          <span>–í—ñ—Ç–∞—î–º–æ, {user?.username} ({user?.role})</span>
          <button onClick={handleLogout} className="logout-btn">
            –í–∏–π—Ç–∏
          </button>
        </div>
      </div>

      <div className="admin-content">
        <nav className="admin-nav">
          <button 
            className={activeTab === 'dashboard' ? 'active' : ''}
            onClick={() => setActiveTab('dashboard')}
          >
            üìä –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
          </button>
          <button 
            className={activeTab === 'products' ? 'active' : ''}
            onClick={() => setActiveTab('products')}
          >
            üì¶ –¢–æ–≤–∞—Ä–∏ ({products.length})
          </button>
          <button 
            className={activeTab === 'add-product' ? 'active' : ''}
            onClick={() => {
              setEditingProduct(null);
              setActiveTab('add-product');
            }}
          >
            ‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä
          </button>
          <button 
            className={activeTab === 'debug' ? 'active' : ''}
            onClick={() => setActiveTab('debug')}
          >
            üîß –û—Ç–ª–∞–¥–∫–∞
          </button>
          <button 
            className={activeTab === 'api-test' ? 'active' : ''}
            onClick={() => setActiveTab('api-test')}
          >
            üåê API –¢–µ—Å—Ç
          </button>
        </nav>

        <main className="admin-main">
          {loading && (
            <div className="admin-loading">
              <div className="spinner"></div>
              <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>
            </div>
          )}

          {activeTab === 'dashboard' && (
            <Dashboard products={products} />
          )}

          {activeTab === 'products' && (
            <ProductList 
              products={products}
              onEdit={handleProductEdit}
              onDelete={handleProductDelete}
              loading={loading}
            />
          )}

          {activeTab === 'add-product' && (
            <ProductForm 
              product={editingProduct}
              onSave={handleProductSave}
              onCancel={() => {
                setEditingProduct(null);
                setActiveTab('products');
              }}
              loading={loading}
            />
          )}

          {activeTab === 'debug' && (
            <div className="debug-panel">
              <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏</h3>
              <div>
                <strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {JSON.stringify(user, null, 2)}
              </div>
              <div>
                <strong>–¢–æ–∫–µ–Ω:</strong> {localStorage.getItem('adminToken') ? '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
              </div>
              <div>
                <strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:</strong> {products.length}
              </div>
              <button onClick={checkServerConnection}>
                –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
              </button>
              <button onClick={loadProducts}>
                –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã
              </button>
              {typeof AdminDebugTest !== 'undefined' && <AdminDebugTest />}
            </div>
          )}

          {activeTab === 'api-test' && (
            typeof ApiTester !== 'undefined' ? <ApiTester /> : 
            <div>API Tester –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
          )}
        </main>
      </div>
    </div>
  );
};

export default AdminPanel;